{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Me \u00b6 Howdy. My name is Bert. I am a dedicated father and husband, and I'm sure I'm a pretty regular guy (for now). My trade is tech, with a specialty in Cloud Architecture, Systems Administration/Orchestration, and everything that ships with DevOps methodoligies, which includes Desired State and Configuration Management, among other buzzwordy terms. My tech stack \u00b6 I absolutely love DevOps and am forever a student of programming languages such as Python , PowerShell , Go , and Ruby . For shell scripting on POSIX-compliant systems, I mostly use Bash , but I can wield a heavy sword on Windows with PowerShell and even BATCH . My Web skills includes: Frontend Development React , CSS Good ol' javascript Backend/API Development Flask nodejs My goto for infrastructure orchestration and platform tooling is Ansible . For Infrastructure as Code (IaC), I use Terraform . Microservices and Virtualization? Oh yeah!: Kubernetes Rancher Docker Ovirt / RHEV ProxMox VMware But wait, there's more: I'm all about that Jenkins for Continuous Integration, and I love love love these Atlassian Products: JIRA Confluence Bitbucket My Tech Notes \u00b6 All of my notes are organized by main topic and tags. You can use the search bar up top for real-time search results or click the hamburger menu at the top left to navigate through main topics. Enjoy!","title":"Home"},{"location":"#about-me","text":"Howdy. My name is Bert. I am a dedicated father and husband, and I'm sure I'm a pretty regular guy (for now). My trade is tech, with a specialty in Cloud Architecture, Systems Administration/Orchestration, and everything that ships with DevOps methodoligies, which includes Desired State and Configuration Management, among other buzzwordy terms.","title":"About Me"},{"location":"#my-tech-stack","text":"I absolutely love DevOps and am forever a student of programming languages such as Python , PowerShell , Go , and Ruby . For shell scripting on POSIX-compliant systems, I mostly use Bash , but I can wield a heavy sword on Windows with PowerShell and even BATCH . My Web skills includes: Frontend Development React , CSS Good ol' javascript Backend/API Development Flask nodejs My goto for infrastructure orchestration and platform tooling is Ansible . For Infrastructure as Code (IaC), I use Terraform . Microservices and Virtualization? Oh yeah!: Kubernetes Rancher Docker Ovirt / RHEV ProxMox VMware But wait, there's more: I'm all about that Jenkins for Continuous Integration, and I love love love these Atlassian Products: JIRA Confluence Bitbucket","title":"My tech stack"},{"location":"#my-tech-notes","text":"All of my notes are organized by main topic and tags. You can use the search bar up top for real-time search results or click the hamburger menu at the top left to navigate through main topics. Enjoy!","title":"My Tech Notes"},{"location":"tags/","text":"Tags \u00b6 [TAGS]","title":"Tags"},{"location":"tags/#tags","text":"[TAGS]","title":"Tags"},{"location":"docs/","text":"","title":"Index"},{"location":"docs/about-mkdocs/","text":"Overview \u00b6 What is MkDocs? \u00b6 The description on the MkDocs site is: Project documentation with Markdown. MkDocs is a Python tool that generates a static site based on content written in Markdown. If you are new to markdown, see the Getting Started page on the Markdown Guide website. Resources \u00b6 mkdocs.org homepage mkdocs/mkdocs MkDocs Wiki - covering themes, plugins, recipes and more. Release notes for MkDocs. Reasons to use MkDocs \u00b6 Create an elegant, modern docs site for your project. Create a static site and serve from GitHub Pages easily. Low-code solution No need to write HTML or learn templating syntax needed Use your existing markdown files as content. Configure with a simple YAML file. Customizable. Add custom HTML if you want. Plugins available. Flexible theme choices. Includes search by default. Broken links to files (including from your navbar) will be detected at build time and shown as warnings. Do I need to know Python? \u00b6 MkDocs is built in Python (like Sphinx), but you don't have to write Python code. If you set up a Deploy flow right, you don't even have to set it up locally, though then you can't preview.","title":"Overview"},{"location":"docs/about-mkdocs/#overview","text":"","title":"Overview"},{"location":"docs/about-mkdocs/#what-is-mkdocs","text":"The description on the MkDocs site is: Project documentation with Markdown. MkDocs is a Python tool that generates a static site based on content written in Markdown. If you are new to markdown, see the Getting Started page on the Markdown Guide website.","title":"What is MkDocs?"},{"location":"docs/about-mkdocs/#resources","text":"mkdocs.org homepage mkdocs/mkdocs MkDocs Wiki - covering themes, plugins, recipes and more. Release notes for MkDocs.","title":"Resources"},{"location":"docs/about-mkdocs/#reasons-to-use-mkdocs","text":"Create an elegant, modern docs site for your project. Create a static site and serve from GitHub Pages easily. Low-code solution No need to write HTML or learn templating syntax needed Use your existing markdown files as content. Configure with a simple YAML file. Customizable. Add custom HTML if you want. Plugins available. Flexible theme choices. Includes search by default. Broken links to files (including from your navbar) will be detected at build time and shown as warnings.","title":"Reasons to use MkDocs"},{"location":"docs/about-mkdocs/#do-i-need-to-know-python","text":"MkDocs is built in Python (like Sphinx), but you don't have to write Python code. If you set up a Deploy flow right, you don't even have to set it up locally, though then you can't preview.","title":"Do I need to know Python?"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/","tags":["ansible","windows","cygwin"],"text":"Overview \u00b6 You want to install ansible on Windows 7 x64 Environment Information \u00b6 Windows OS: powershell -NoProfile [System.Environment]::OSVersion.Version OS: Windows 7 x64 Major Minor Build Revision ----- ----- ----- -------- 6 1 7601 65536 Cygwin Version (post-installation): 3.0.7(0.338/5/3) Ansible Environment (post-installation): ansible --version ansible 2.9.0.dev0 config file = None configured module search path = [u'/home/${USERNAME}/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules'] ansible python module location = /usr/lib/python2.7/site-packages/ansible-2.9.0.dev0-py2.7.egg/ansible executable location = /opt/ansible/bin/ansible python version = 2.7.16 (default, Mar 20 2019, 12:15:19) [GCC 7.4.0] Instructions \u00b6 Install cygwin \u00b6 Download cygwin64 from https://www.cygwin.com/setup-x86_64.exe Create the installation folder (I'm using C:\\tools\\cygwin ) Move setup-x86_64.exe to C:\\tools\\cygwin Click setup-x86_64.exe Make sure to set the install folder and package folder to C:\\tools\\cygwin Go through the setup instructions, and when at the package selection screen, Only install wget The cygwin64 core package installations will take time, so busy yourself with something else in the meantime :) Once the installation is complete, close it out Install python and its dependencies \u00b6 From the installation folder ( C:\\tools\\cygwin ), click Cygwin.bat This will initialize your cygwin environment and start the bash interactive terminal Adjust shell environment: export PATH=\"/usr/bin:$PATH\" PATH+=:~+/bin Install the apt-cyg package manager wget raw.github.com/transcode-open/apt-cyg/master/apt-cyg chmod +x apt-cyg mv apt-cyg /usr/local/bin which -a apt-cyg >/dev/null 2>&1 && echo ok install git, python-devel, gcc-g++, curl, dos2unix, zip, unzip apt-cyg install git python-devel curl dos2unix zip unzip install pip wget https://bootstrap.pypa.io/get-pip.py python get-pip.py Install python and its dependencies \u00b6 Your cygwin environment should be good for installing ansible, so let's get to it. Install dependence apt-cyg install openssl openssl-devel libffi-devel vim apt-cyg install python-{jinja2,six,yaml,crypto,cryptography} Install ansible from github mkdir /opt cd /opt git clone --depth 1 git://github.com/ansible/ansible cd ansible python setup.py install Update your PATH variable echo export PATH=\"/opt/ansible/bin:\\$PATH\" >> ~/.bash_profile Verify installation which -a ansible >/dev/null 2>&1 && echo We found the anible binary! || echo We could not find the ansible binary! Please troubleshoot! Troubleshooting If problems, use a search engine to look up any errors, start over, rinse/repeat Test Run \u00b6 The below worked! ansible --connection=local localhost, -m setup -a 'filter=ansible_host*' Appendix \u00b6 Setup cmder \u00b6 I ran the above tests using Cmder . Instructions: - Start cmder - Click the green + sign at the bottom right - Click \"Setup Tasks\" - Click the + sign at the bottom of 'Predefined tasks (command groups)' - For 'Task Parameters', enter: /icon \"**C:\\tools\\cygwin**\\Cygwin.ico\" - Paste this into the empty text area at the bottom right: -cur_console:t:ansible \"**C:\\tools\\cygwin**\\bin\\bash.exe\" --login -i Notes \u00b6 Final folder size for C:\\tools\\cygwin : 1.24 GB That's a big-ass folder for lil' ol' ansible ... So yeah ... Learning Points \u00b6 Ansible can (at least in theory) run on Windows 7 x64, but it's not without pain AND it's not without problems. I tested the uri module and was greeted with an error: The following modules failed to execute: setup setup: MODULE FAILURE See stdout/stderr for the exact error More digging I must do. References \u00b6 Google Search > ansible on windows 7 - https://lmgtfy.com/?q=ansible+on+windows+7 Google Search > \"apt-cyg\" \"ansible\" \"bat\" - https://lmgtfy.com/?q=%22apt-cyg%22+%22ansible%22+%22bat%22 pip - Installing Ansible Python package on Windows - Stack Overflow - https://stackoverflow.com/questions/51167099/installing-ansible-python-package-on-windows Running Ansible within Windows (Jeff Geerling) - https://www.jeffgeerling.com/blog/running-ansible-within-windows How to install Ansible to Windows - https://gist.github.com/eyasuyuki/d9c1dc96a9b8356164e5","title":"Portable Ansible Installation on Windows 7 using Cygwin"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#overview","text":"You want to install ansible on Windows 7 x64","title":"Overview"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#environment-information","text":"Windows OS: powershell -NoProfile [System.Environment]::OSVersion.Version OS: Windows 7 x64 Major Minor Build Revision ----- ----- ----- -------- 6 1 7601 65536 Cygwin Version (post-installation): 3.0.7(0.338/5/3) Ansible Environment (post-installation): ansible --version ansible 2.9.0.dev0 config file = None configured module search path = [u'/home/${USERNAME}/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules'] ansible python module location = /usr/lib/python2.7/site-packages/ansible-2.9.0.dev0-py2.7.egg/ansible executable location = /opt/ansible/bin/ansible python version = 2.7.16 (default, Mar 20 2019, 12:15:19) [GCC 7.4.0]","title":"Environment Information"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#instructions","text":"","title":"Instructions"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#install-cygwin","text":"Download cygwin64 from https://www.cygwin.com/setup-x86_64.exe Create the installation folder (I'm using C:\\tools\\cygwin ) Move setup-x86_64.exe to C:\\tools\\cygwin Click setup-x86_64.exe Make sure to set the install folder and package folder to C:\\tools\\cygwin Go through the setup instructions, and when at the package selection screen, Only install wget The cygwin64 core package installations will take time, so busy yourself with something else in the meantime :) Once the installation is complete, close it out","title":"Install cygwin"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#install-python-and-its-dependencies","text":"From the installation folder ( C:\\tools\\cygwin ), click Cygwin.bat This will initialize your cygwin environment and start the bash interactive terminal Adjust shell environment: export PATH=\"/usr/bin:$PATH\" PATH+=:~+/bin Install the apt-cyg package manager wget raw.github.com/transcode-open/apt-cyg/master/apt-cyg chmod +x apt-cyg mv apt-cyg /usr/local/bin which -a apt-cyg >/dev/null 2>&1 && echo ok install git, python-devel, gcc-g++, curl, dos2unix, zip, unzip apt-cyg install git python-devel curl dos2unix zip unzip install pip wget https://bootstrap.pypa.io/get-pip.py python get-pip.py","title":"Install python and its dependencies"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#install-python-and-its-dependencies_1","text":"Your cygwin environment should be good for installing ansible, so let's get to it. Install dependence apt-cyg install openssl openssl-devel libffi-devel vim apt-cyg install python-{jinja2,six,yaml,crypto,cryptography} Install ansible from github mkdir /opt cd /opt git clone --depth 1 git://github.com/ansible/ansible cd ansible python setup.py install Update your PATH variable echo export PATH=\"/opt/ansible/bin:\\$PATH\" >> ~/.bash_profile Verify installation which -a ansible >/dev/null 2>&1 && echo We found the anible binary! || echo We could not find the ansible binary! Please troubleshoot! Troubleshooting If problems, use a search engine to look up any errors, start over, rinse/repeat","title":"Install python and its dependencies"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#test-run","text":"The below worked! ansible --connection=local localhost, -m setup -a 'filter=ansible_host*'","title":"Test Run"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#appendix","text":"","title":"Appendix"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#setup-cmder","text":"I ran the above tests using Cmder . Instructions: - Start cmder - Click the green + sign at the bottom right - Click \"Setup Tasks\" - Click the + sign at the bottom of 'Predefined tasks (command groups)' - For 'Task Parameters', enter: /icon \"**C:\\tools\\cygwin**\\Cygwin.ico\" - Paste this into the empty text area at the bottom right: -cur_console:t:ansible \"**C:\\tools\\cygwin**\\bin\\bash.exe\" --login -i","title":"Setup cmder"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#notes","text":"Final folder size for C:\\tools\\cygwin : 1.24 GB That's a big-ass folder for lil' ol' ansible ... So yeah ...","title":"Notes"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#learning-points","text":"Ansible can (at least in theory) run on Windows 7 x64, but it's not without pain AND it's not without problems. I tested the uri module and was greeted with an error: The following modules failed to execute: setup setup: MODULE FAILURE See stdout/stderr for the exact error More digging I must do.","title":"Learning Points"},{"location":"docs/topics/ansible/windows/ansible-on-windows-7-with-cygwin/#references","text":"Google Search > ansible on windows 7 - https://lmgtfy.com/?q=ansible+on+windows+7 Google Search > \"apt-cyg\" \"ansible\" \"bat\" - https://lmgtfy.com/?q=%22apt-cyg%22+%22ansible%22+%22bat%22 pip - Installing Ansible Python package on Windows - Stack Overflow - https://stackoverflow.com/questions/51167099/installing-ansible-python-package-on-windows Running Ansible within Windows (Jeff Geerling) - https://www.jeffgeerling.com/blog/running-ansible-within-windows How to install Ansible to Windows - https://gist.github.com/eyasuyuki/d9c1dc96a9b8356164e5","title":"References"},{"location":"docs/topics/kubernetes/troubleshooting/docker-volume-mounts-and-autofs/","tags":["kubernetes","docker","microservices","storage"],"text":"Scenario \u00b6 I'm unable to login to my docker host via ssh public key, but my password works, and/or I'm able to login to the system console. Once at the console, I observed an error similar to: Could not chdir to home directory /home/myuser: Too many levels of symbolic links -bash: /home/myuser/.bash_profile: Too many levels of symbolic links Hmm wtf ... Environment details \u00b6 Machine_Type: Virtual OS: Oracle Enterprise Linux 7.x Software: Docker 1.12.6, Kubernetes 1.7.1 Troubleshooting Steps \u00b6 A fellow admin suggested I check for docker mapped volumes that point to /home Here's the command I used to query for that: sudo docker ps --filter volume = /home --format \"Name:\\\\n\\\\t{{.Names}}\\\\nID:\\\\n\\\\t{{.ID}}\\\\nMounts:\\\\n\\\\t{{.Mounts}}\\\\n\" Boom, looks like the kubernetes weaver pod is using that mapping: Name ID Mounts k8s_weave_weave-net-ljzn9_kube-system_740c10c5-d6b8-11e7-838f-005056b5384e_0 dc95801e4442 /opt/kubernetes,/lib/modules,/run/xtables.lo,/var/lib/kubele,/var/lib/weave,/etc,/var/lib/dbus,/var/lib/kubele,/home Ok, so why would a docker volume mapped to /home induce such a problem? Turns out that in some cases, binding autofs-mounted paths to docker containers can cause problems on the docker host. This is due to the way in which kubernetes performs the volume mapping, which utilizes docker volume binds under the hood. And, depending on how you map a volume to a docker container, you might conflict with autofs volume mounting. For insight into a similar issue, see: Issue with AutoFS mounts and docker 1.11.2: https://github.com/moby/moby/issues/24303 According to the issue description above, the problem we're seeing might be fixed by adjusting the bind propagation for the volume mount in question. See: https://docs.docker.com/engine/admin/volumes/bind-mounts/#choosing-the--v-or-mount-flag However, there's no way to control that setting via a kubernetes manifest, not at present at least, since HostPath bind propagation is currently a proposed feature in kubernetes. See: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/propagation.md So the best course of action is to simply change hostPath setting in the weave-kube manifest, e.g. Change: hostPath: path: /home To: hostPath: path: /opt/kubernetes/bind-mounts/weave-kube/home You can then simply redeploy the offending container: kubectl delete daemonset weave-net && kubectl apply -f weave-net.yaml Note: You'll have to perform similar changes to the weave manifest according to whatever other autofs mounts its hostPath(s) might conflict with. Learning Points \u00b6 If you are utilizing autofs on your docker host, ensure you review your autofs settings before deploying your containers.","title":"Docker Volume Mounts And Autofs"},{"location":"docs/topics/kubernetes/troubleshooting/docker-volume-mounts-and-autofs/#scenario","text":"I'm unable to login to my docker host via ssh public key, but my password works, and/or I'm able to login to the system console. Once at the console, I observed an error similar to: Could not chdir to home directory /home/myuser: Too many levels of symbolic links -bash: /home/myuser/.bash_profile: Too many levels of symbolic links Hmm wtf ...","title":"Scenario"},{"location":"docs/topics/kubernetes/troubleshooting/docker-volume-mounts-and-autofs/#environment-details","text":"Machine_Type: Virtual OS: Oracle Enterprise Linux 7.x Software: Docker 1.12.6, Kubernetes 1.7.1","title":"Environment details"},{"location":"docs/topics/kubernetes/troubleshooting/docker-volume-mounts-and-autofs/#troubleshooting-steps","text":"A fellow admin suggested I check for docker mapped volumes that point to /home Here's the command I used to query for that: sudo docker ps --filter volume = /home --format \"Name:\\\\n\\\\t{{.Names}}\\\\nID:\\\\n\\\\t{{.ID}}\\\\nMounts:\\\\n\\\\t{{.Mounts}}\\\\n\" Boom, looks like the kubernetes weaver pod is using that mapping: Name ID Mounts k8s_weave_weave-net-ljzn9_kube-system_740c10c5-d6b8-11e7-838f-005056b5384e_0 dc95801e4442 /opt/kubernetes,/lib/modules,/run/xtables.lo,/var/lib/kubele,/var/lib/weave,/etc,/var/lib/dbus,/var/lib/kubele,/home Ok, so why would a docker volume mapped to /home induce such a problem? Turns out that in some cases, binding autofs-mounted paths to docker containers can cause problems on the docker host. This is due to the way in which kubernetes performs the volume mapping, which utilizes docker volume binds under the hood. And, depending on how you map a volume to a docker container, you might conflict with autofs volume mounting. For insight into a similar issue, see: Issue with AutoFS mounts and docker 1.11.2: https://github.com/moby/moby/issues/24303 According to the issue description above, the problem we're seeing might be fixed by adjusting the bind propagation for the volume mount in question. See: https://docs.docker.com/engine/admin/volumes/bind-mounts/#choosing-the--v-or-mount-flag However, there's no way to control that setting via a kubernetes manifest, not at present at least, since HostPath bind propagation is currently a proposed feature in kubernetes. See: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/propagation.md So the best course of action is to simply change hostPath setting in the weave-kube manifest, e.g. Change: hostPath: path: /home To: hostPath: path: /opt/kubernetes/bind-mounts/weave-kube/home You can then simply redeploy the offending container: kubectl delete daemonset weave-net && kubectl apply -f weave-net.yaml Note: You'll have to perform similar changes to the weave manifest according to whatever other autofs mounts its hostPath(s) might conflict with.","title":"Troubleshooting Steps"},{"location":"docs/topics/kubernetes/troubleshooting/docker-volume-mounts-and-autofs/#learning-points","text":"If you are utilizing autofs on your docker host, ensure you review your autofs settings before deploying your containers.","title":"Learning Points"},{"location":"docs/topics/kubernetes/troubleshooting/pod_tolerates_node_taints/","tags":["kubernetes","microservices"],"text":"Scenario \u00b6 You have a single node (master) kubernetes deployment and you want to schedule standard pods. The master name is your hostname: $(hostname) Upon your attempt at deploying a service, you notice the state of the resulting pod remains in Pending . Further investigation via kubectl describe pod YOUR_POD_NAME reveals an error similar to No nodes are available that match all of the following predicates:: PodToleratesNodeTaints Due Diligence: All kubernetes nodes are in a 'Ready' status: kubectl get nodes All kubernetes nodes have sufficient resources for pod deployment: kubectl describe nodes Your image is available on the docker registry you've specified in your kubernetes manifest (.yaml) Root Cause \u00b6 As per the kubernetes documentation, standard pods are not allowed scheduling on the master node. The mechanism by which this is disallowed is via node taints. You can read more about this here: Taints and Tolerations - Kubernetes Solution \u00b6 You want to be able to schedule a standard pod (i.e. does not belong to the kube-system namespace) on your kubernets master node. As follows: kubectl taint nodes $(hostname) node-role.kubernetes.io/master:NoSchedule- You should see a confirmation similar to: node untainted . You should now be able to schedule pods on this node. Notes \u00b6 I came across the github issue description by Googling the following search term: \"No nodes are available that match all of the following predicates\" \"PodToleratesNodeTaints\"","title":"Pod Tolerates Node Taints"},{"location":"docs/topics/kubernetes/troubleshooting/pod_tolerates_node_taints/#scenario","text":"You have a single node (master) kubernetes deployment and you want to schedule standard pods. The master name is your hostname: $(hostname) Upon your attempt at deploying a service, you notice the state of the resulting pod remains in Pending . Further investigation via kubectl describe pod YOUR_POD_NAME reveals an error similar to No nodes are available that match all of the following predicates:: PodToleratesNodeTaints Due Diligence: All kubernetes nodes are in a 'Ready' status: kubectl get nodes All kubernetes nodes have sufficient resources for pod deployment: kubectl describe nodes Your image is available on the docker registry you've specified in your kubernetes manifest (.yaml)","title":"Scenario"},{"location":"docs/topics/kubernetes/troubleshooting/pod_tolerates_node_taints/#root-cause","text":"As per the kubernetes documentation, standard pods are not allowed scheduling on the master node. The mechanism by which this is disallowed is via node taints. You can read more about this here: Taints and Tolerations - Kubernetes","title":"Root Cause"},{"location":"docs/topics/kubernetes/troubleshooting/pod_tolerates_node_taints/#solution","text":"You want to be able to schedule a standard pod (i.e. does not belong to the kube-system namespace) on your kubernets master node. As follows: kubectl taint nodes $(hostname) node-role.kubernetes.io/master:NoSchedule- You should see a confirmation similar to: node untainted . You should now be able to schedule pods on this node.","title":"Solution"},{"location":"docs/topics/kubernetes/troubleshooting/pod_tolerates_node_taints/#notes","text":"I came across the github issue description by Googling the following search term: \"No nodes are available that match all of the following predicates\" \"PodToleratesNodeTaints\"","title":"Notes"},{"location":"docs/topics/pfsense/troubleshooting/boot-failure-after-upgrade-to-2-4-0/","tags":["router","firewall","networking","pfSense"],"text":"Scenario \u00b6 You upgraded from pfsense 2.3x to 2.4.0 Upon reboot, I was unable to ssh to the box. Once at the physical console, I noticed pfsense had encountered a panic condition, barking about not being able to mount /dev/ad0s1a Troubleshooting \u00b6 At the prompt, I typed in \"?\" to review the available block devices (disks and the like) I saw in the output the device /dev/ada0s1a , a slightly different device path from what the error message referred to. I then entered in: ufs:/dev/ada0s1a , and boom, pfsense kicked off its regular routines (although it did keep barking about this or that package needing to be cleaned and such). The permanent fix was to correct the mount references in /etc/fstab. I changed any reference to ad0 to ada0 , rebooted, and voila. Next time I upgrade pfsense, I'll read up on any known issues and the like. Hint Hint: 2.4 New Features and Changes: https://doc.pfsense.org/index.php/2.4_New_Features_and_Changes#Known_Issues","title":"Boot failure after upgrading pfsense to 2.4.0"},{"location":"docs/topics/pfsense/troubleshooting/boot-failure-after-upgrade-to-2-4-0/#scenario","text":"You upgraded from pfsense 2.3x to 2.4.0 Upon reboot, I was unable to ssh to the box. Once at the physical console, I noticed pfsense had encountered a panic condition, barking about not being able to mount /dev/ad0s1a","title":"Scenario"},{"location":"docs/topics/pfsense/troubleshooting/boot-failure-after-upgrade-to-2-4-0/#troubleshooting","text":"At the prompt, I typed in \"?\" to review the available block devices (disks and the like) I saw in the output the device /dev/ada0s1a , a slightly different device path from what the error message referred to. I then entered in: ufs:/dev/ada0s1a , and boom, pfsense kicked off its regular routines (although it did keep barking about this or that package needing to be cleaned and such). The permanent fix was to correct the mount references in /etc/fstab. I changed any reference to ad0 to ada0 , rebooted, and voila. Next time I upgrade pfsense, I'll read up on any known issues and the like. Hint Hint: 2.4 New Features and Changes: https://doc.pfsense.org/index.php/2.4_New_Features_and_Changes#Known_Issues","title":"Troubleshooting"},{"location":"docs/tutorial/advanced/","text":"Advanced \u00b6 Beyond the basic configuration and content Once you've got the Set up Project section, you can customize further using this guide. Or skip this and go to Usage . Navbar nesting \u00b6 You can add an additional level to your navbar like this: nav : - Home : index.md - About : about.md - Foo : - Overview : foo/index.md - Bar : foo/bar.md The value can either be a string (as in the first case) or a map (as in the last case). This seems to be a YAML limitation but see also issue #1139 . Add config options \u00b6 See Configuration page on MkDocs site for options. Separate docs directory approach \u00b6 You can also structure your project to have the set up above nested inside a docs directory. This is useful you have a few other directories and you want to keep the project root clean. docs/ docs/ index.md theme/ main.html nav.html toc.html mkdocs.yml An example of this is the Poetry repo. That project is also how I got into MkDocs in the first place. Embedding \u00b6 To embed a gist, just copy and paste the embed script URL which is provided on a gist. e.g. < script src = \"https://gist.github.com/MichaelCurrin/57caae30bd7b0991098e9804a9494c23.js\" ></ script >","title":"Advanced"},{"location":"docs/tutorial/advanced/#advanced","text":"Beyond the basic configuration and content Once you've got the Set up Project section, you can customize further using this guide. Or skip this and go to Usage .","title":"Advanced"},{"location":"docs/tutorial/advanced/#navbar-nesting","text":"You can add an additional level to your navbar like this: nav : - Home : index.md - About : about.md - Foo : - Overview : foo/index.md - Bar : foo/bar.md The value can either be a string (as in the first case) or a map (as in the last case). This seems to be a YAML limitation but see also issue #1139 .","title":"Navbar nesting"},{"location":"docs/tutorial/advanced/#add-config-options","text":"See Configuration page on MkDocs site for options.","title":"Add config options"},{"location":"docs/tutorial/advanced/#separate-docs-directory-approach","text":"You can also structure your project to have the set up above nested inside a docs directory. This is useful you have a few other directories and you want to keep the project root clean. docs/ docs/ index.md theme/ main.html nav.html toc.html mkdocs.yml An example of this is the Poetry repo. That project is also how I got into MkDocs in the first place.","title":"Separate docs directory approach"},{"location":"docs/tutorial/advanced/#embedding","text":"To embed a gist, just copy and paste the embed script URL which is provided on a gist. e.g. < script src = \"https://gist.github.com/MichaelCurrin/57caae30bd7b0991098e9804a9494c23.js\" ></ script >","title":"Embedding"},{"location":"docs/tutorial/deploy/","text":"Deploy \u00b6 Build and deploy to a remote public site See Deploying Your Docs on the Mkdocs site for more details. GitHub Pages \u00b6 How to deploy your docs site to GitHub Pages. Follow one of the approaches below: Run deploy command - Run a MkDocs CLI command locally to deploy. Deploy with GitHub Actions - Use the project's CI workflow in the cloud to build and deploy to GH Pages on commits pushed to master. Then go to your repo's Settings and Pages then enable GitHub Pages on the gh-pages branch's root. Note this is for a Project Page on a subpath, you will have to make adjustments to the command below if you want an Organization or User Page on the root path. Run deploy command \u00b6 Run a MkDocs CLI command locally to deploy MkDocs needs to know where to publish commits on GitHub - so make sure you are working with a repo that you cloned, or that you initialize the local repo and add a remote repo. Run this command locally: $ make d That will use Makefile to run the following: $ mkdocs gh-deploy --strict --force That will do the following: Clean and build to site directory. Force push to gh-pages branch, overwriting any changes which were pushed from another build. Then go to your repo on GitHub, look at the Environment tab. When it is done building, click View deployment to see your site. e.g. michaelcurrin.github.io/mkdocs-quickstart/ See deploy options in the help: $ mkdocs gh-deploy --help Deploy with GitHub Actions \u00b6 Set up continuous deployment config to enable deploys on a change to files on GitHub When you make changes to your docs config or the docs directory, especially editing on GitHub directly, it's often useful to have the docs site build and deploy automatically in a remote environment. This is provided for free by GitHub. See the docs.yml workflow provided with this project. You don't have to change anything there. The token will be generated for you by GitHub Actions.","title":"Deploy"},{"location":"docs/tutorial/deploy/#deploy","text":"Build and deploy to a remote public site See Deploying Your Docs on the Mkdocs site for more details.","title":"Deploy"},{"location":"docs/tutorial/deploy/#github-pages","text":"How to deploy your docs site to GitHub Pages. Follow one of the approaches below: Run deploy command - Run a MkDocs CLI command locally to deploy. Deploy with GitHub Actions - Use the project's CI workflow in the cloud to build and deploy to GH Pages on commits pushed to master. Then go to your repo's Settings and Pages then enable GitHub Pages on the gh-pages branch's root. Note this is for a Project Page on a subpath, you will have to make adjustments to the command below if you want an Organization or User Page on the root path.","title":"GitHub Pages"},{"location":"docs/tutorial/deploy/#run-deploy-command","text":"Run a MkDocs CLI command locally to deploy MkDocs needs to know where to publish commits on GitHub - so make sure you are working with a repo that you cloned, or that you initialize the local repo and add a remote repo. Run this command locally: $ make d That will use Makefile to run the following: $ mkdocs gh-deploy --strict --force That will do the following: Clean and build to site directory. Force push to gh-pages branch, overwriting any changes which were pushed from another build. Then go to your repo on GitHub, look at the Environment tab. When it is done building, click View deployment to see your site. e.g. michaelcurrin.github.io/mkdocs-quickstart/ See deploy options in the help: $ mkdocs gh-deploy --help","title":"Run deploy command"},{"location":"docs/tutorial/deploy/#deploy-with-github-actions","text":"Set up continuous deployment config to enable deploys on a change to files on GitHub When you make changes to your docs config or the docs directory, especially editing on GitHub directly, it's often useful to have the docs site build and deploy automatically in a remote environment. This is provided for free by GitHub. See the docs.yml workflow provided with this project. You don't have to change anything there. The token will be generated for you by GitHub Actions.","title":"Deploy with GitHub Actions"},{"location":"docs/tutorial/installation/","text":"Installation \u00b6 How to install MkDocs locally. Requirements \u00b6 Python 3 Make - standard on macOS and Linux but can be installed on Windows too. Install system dependencies \u00b6 Set up a new repo \u00b6 Follow the Tutorial page to set up a project from scratch. Or click this create your own copy of the repo. Then clone your repo. e.g. $ git clone git@github.com:MichaelCurrin/mkdocs-quickstart.git $ cd mkdocs-quickstart Install project dependencies \u00b6 Install MkDocs locally For more info, see the Installation page on the MkDocs site. Install in a virtual environment \u00b6 Create a virtual environment at the project root - this is used to isolate project packages from the global packages. $ python3 -m venv venv Activate the environment. $ source venv/bin/activate Install mkdocs - this is covered in the project requirements file. $ cd docs $ make install Note - mkdocs 1.2 causes a break on force pushes, so this is excluded in the requirements. See issue #2447 . Install globally \u00b6 If you prefer to install MkDocs once and reuse it across projects, then you can install it globally instead. MkDocs is available using package managers like apt-get , homebrew and yum . Or you can install like this: $ python3 -m pip install mkdocs If you get prompted for sudo use, then cancel and run again with -U flag for user-level install.","title":"Installation"},{"location":"docs/tutorial/installation/#installation","text":"How to install MkDocs locally.","title":"Installation"},{"location":"docs/tutorial/installation/#requirements","text":"Python 3 Make - standard on macOS and Linux but can be installed on Windows too.","title":"Requirements"},{"location":"docs/tutorial/installation/#install-system-dependencies","text":"","title":"Install system dependencies"},{"location":"docs/tutorial/installation/#set-up-a-new-repo","text":"Follow the Tutorial page to set up a project from scratch. Or click this create your own copy of the repo. Then clone your repo. e.g. $ git clone git@github.com:MichaelCurrin/mkdocs-quickstart.git $ cd mkdocs-quickstart","title":"Set up a new repo"},{"location":"docs/tutorial/installation/#install-project-dependencies","text":"Install MkDocs locally For more info, see the Installation page on the MkDocs site.","title":"Install project dependencies"},{"location":"docs/tutorial/installation/#install-in-a-virtual-environment","text":"Create a virtual environment at the project root - this is used to isolate project packages from the global packages. $ python3 -m venv venv Activate the environment. $ source venv/bin/activate Install mkdocs - this is covered in the project requirements file. $ cd docs $ make install Note - mkdocs 1.2 causes a break on force pushes, so this is excluded in the requirements. See issue #2447 .","title":"Install in a virtual environment"},{"location":"docs/tutorial/installation/#install-globally","text":"If you prefer to install MkDocs once and reuse it across projects, then you can install it globally instead. MkDocs is available using package managers like apt-get , homebrew and yum . Or you can install like this: $ python3 -m pip install mkdocs If you get prompted for sudo use, then cancel and run again with -U flag for user-level install.","title":"Install globally"},{"location":"docs/tutorial/quickstart/","text":"MkDocs Quickstart \u00b6 Started template for a MkDocs docs site on GH Pages - including CI Use the MkDocs ( make docs ) tool to create build a docs site around markdown docs. Follow the tutorial to add an existing project or create a project from scratch. The result will look like this project. Features \u00b6 How to use this project Follow the tutorial instructions Install and configure a new or existing project. Run it locally. Deploy it. Add a copy of this project to your repos View the live demo This site is hosted on GitHub Pages. See if you like it. Other themes are available - see the tutorial. The aim here is not be complete or explain all concepts. It is to provide a reference for common steps and choices needed when setting up a docs site, but still at a beginner-friendly level. This guide is based on the mkdocs.org tutorial.","title":"Quickstart"},{"location":"docs/tutorial/quickstart/#mkdocs-quickstart","text":"Started template for a MkDocs docs site on GH Pages - including CI Use the MkDocs ( make docs ) tool to create build a docs site around markdown docs. Follow the tutorial to add an existing project or create a project from scratch. The result will look like this project.","title":"MkDocs Quickstart"},{"location":"docs/tutorial/quickstart/#features","text":"How to use this project Follow the tutorial instructions Install and configure a new or existing project. Run it locally. Deploy it. Add a copy of this project to your repos View the live demo This site is hosted on GitHub Pages. See if you like it. Other themes are available - see the tutorial. The aim here is not be complete or explain all concepts. It is to provide a reference for common steps and choices needed when setting up a docs site, but still at a beginner-friendly level. This guide is based on the mkdocs.org tutorial.","title":"Features"},{"location":"docs/tutorial/setup-project/","text":"Set up project \u00b6 How to create a MkDocs site from scratch This is a summary of the tutorial on mkdocs.org . How to use this guide \u00b6 Use one of the approaches below: Create a quickstart project with the new command covered in Create a starter site . Follow the extended guide to create a Set up up docs site by hand. Basic structure \u00b6 This is the simplest MkDocs site you can make: docs/ index.md - Homepage in the docs directory (by default). mkdocs.yml Config at the root - control appearance and navigation of your site. See this project's docs/mkdocs.yml file on GitHub. Notes on fields for the config: site_name - title of your site. site_description - used as a description for SEO and you could use it somewhere in your template. site_url - now a required field when running a deploy. Include the subpath on the domain. If your site is not ready to be hosted, set this field to an empty string. repo_url - for Edit on GitHub button. See docs . edit_uri - defaults to edit/master/docs/ , which includes docs directory of markdown files inside your repo root. But, if the site's root is in an outer docs directory, then you need to also add that, so paths do not break. e.g. edit/master/docs/docs . See docs Requirements file \u00b6 A requirements file is optional but it can make it easier to manage dependencies. If you choose not use the file, make sure pip install mkdocs and pip install THEME lines are your instructions. If you want to add, then include requirements.txt at the root. If your project is already a Python project, you might prefer to add mkdocs in requirements-dev.txt or at docs/requirements.txt to keep it isolated.This file should have mkdocs in it and also any themes if needed. Create a starter site \u00b6 Run this command to create a starter site. This make the steps below go quicker. cd my-project mkdocs new PATH The result will be same as the Basic structure defined above and will include minimal text content generated by the MkDocs CLI. This text is defined in the project's new.py module. Set up a docs site \u00b6 Tip: Optionally use the new command covered above to set up the config and index page first and then continue . Create doc pages. Create a docs directory. Create index.md as your homepage. Create other markdown pages (optional). Use placeholder content if you want to move on and then come back to expand them. If you have any existing markdown docs, these will work too. Set up config. Create mkdocs.yml at the project root. Set up a navbar there. Choose a theme. Create a favicon (optional). It will be picked up at this path: docs/img/favicon.ico . Add to your .gitignore . Add build directory. This will prevent it from being versioned on master branch. Add virtual environment, if using one. You project should now look this this: docs/ index.md More pages... mkdocs.yml .gitignore venv requirements.txt - optional Sample content \u00b6 Ignore file \u00b6 .gitignore site/ venv Navbar \u00b6 mkdocs.yml nav : - Home : index.md - About : about.md Themes \u00b6 Builtin \u00b6 Use a builtin theme that comes with MkDocs. The default. theme : mkdocs Using ReadTheDocs theme and alternative config syntax. theme : name : readthedocs Find more supported themes . If it doesn't immediately, you'll have to use pip to install it and add to a requirements.txt file. ReadTheDocs Dropdown theme \u00b6 See below using mkdocs-rtd-dropdown . requirements.txt : mkdocs-rtd-dropdown mkdocs.yml : theme : name : 'rtd-dropdown' Material for MkdDocs theme \u00b6 See the MkDocs for Material homepage. See the Set up page for config options. requirements.txt : mkdocs-material-extensions>=1.0 mkdocs.yml : theme : name : 'material'","title":"Set up project"},{"location":"docs/tutorial/setup-project/#set-up-project","text":"How to create a MkDocs site from scratch This is a summary of the tutorial on mkdocs.org .","title":"Set up project"},{"location":"docs/tutorial/setup-project/#how-to-use-this-guide","text":"Use one of the approaches below: Create a quickstart project with the new command covered in Create a starter site . Follow the extended guide to create a Set up up docs site by hand.","title":"How to use this guide"},{"location":"docs/tutorial/setup-project/#basic-structure","text":"This is the simplest MkDocs site you can make: docs/ index.md - Homepage in the docs directory (by default). mkdocs.yml Config at the root - control appearance and navigation of your site. See this project's docs/mkdocs.yml file on GitHub. Notes on fields for the config: site_name - title of your site. site_description - used as a description for SEO and you could use it somewhere in your template. site_url - now a required field when running a deploy. Include the subpath on the domain. If your site is not ready to be hosted, set this field to an empty string. repo_url - for Edit on GitHub button. See docs . edit_uri - defaults to edit/master/docs/ , which includes docs directory of markdown files inside your repo root. But, if the site's root is in an outer docs directory, then you need to also add that, so paths do not break. e.g. edit/master/docs/docs . See docs","title":"Basic structure"},{"location":"docs/tutorial/setup-project/#requirements-file","text":"A requirements file is optional but it can make it easier to manage dependencies. If you choose not use the file, make sure pip install mkdocs and pip install THEME lines are your instructions. If you want to add, then include requirements.txt at the root. If your project is already a Python project, you might prefer to add mkdocs in requirements-dev.txt or at docs/requirements.txt to keep it isolated.This file should have mkdocs in it and also any themes if needed.","title":"Requirements file"},{"location":"docs/tutorial/setup-project/#create-a-starter-site","text":"Run this command to create a starter site. This make the steps below go quicker. cd my-project mkdocs new PATH The result will be same as the Basic structure defined above and will include minimal text content generated by the MkDocs CLI. This text is defined in the project's new.py module.","title":"Create a starter site"},{"location":"docs/tutorial/setup-project/#set-up-a-docs-site","text":"Tip: Optionally use the new command covered above to set up the config and index page first and then continue . Create doc pages. Create a docs directory. Create index.md as your homepage. Create other markdown pages (optional). Use placeholder content if you want to move on and then come back to expand them. If you have any existing markdown docs, these will work too. Set up config. Create mkdocs.yml at the project root. Set up a navbar there. Choose a theme. Create a favicon (optional). It will be picked up at this path: docs/img/favicon.ico . Add to your .gitignore . Add build directory. This will prevent it from being versioned on master branch. Add virtual environment, if using one. You project should now look this this: docs/ index.md More pages... mkdocs.yml .gitignore venv requirements.txt - optional","title":"Set up a docs site"},{"location":"docs/tutorial/setup-project/#sample-content","text":"","title":"Sample content"},{"location":"docs/tutorial/setup-project/#ignore-file","text":".gitignore site/ venv","title":"Ignore file"},{"location":"docs/tutorial/setup-project/#navbar","text":"mkdocs.yml nav : - Home : index.md - About : about.md","title":"Navbar"},{"location":"docs/tutorial/setup-project/#themes","text":"","title":"Themes"},{"location":"docs/tutorial/setup-project/#builtin","text":"Use a builtin theme that comes with MkDocs. The default. theme : mkdocs Using ReadTheDocs theme and alternative config syntax. theme : name : readthedocs Find more supported themes . If it doesn't immediately, you'll have to use pip to install it and add to a requirements.txt file.","title":"Builtin"},{"location":"docs/tutorial/setup-project/#readthedocs-dropdown-theme","text":"See below using mkdocs-rtd-dropdown . requirements.txt : mkdocs-rtd-dropdown mkdocs.yml : theme : name : 'rtd-dropdown'","title":"ReadTheDocs Dropdown theme"},{"location":"docs/tutorial/setup-project/#material-for-mkddocs-theme","text":"See the MkDocs for Material homepage. See the Set up page for config options. requirements.txt : mkdocs-material-extensions>=1.0 mkdocs.yml : theme : name : 'material'","title":"Material for MkdDocs theme"},{"location":"docs/tutorial/tldr/","text":"TL;DR \u00b6 A simplified version of the tutorial. Local setup \u00b6 Install pip install mkdocs Set up project mkdocs new . or Run mkdocs serve View on localhost:8000 Deploy to remote site \u00b6 Run deploy command locally \u00b6 Deploy to GitHub Pages mkdocs gh-deploy View published site on GitHub Pages at https://USERNAME.github.io/REPO-NAME/ Run continuous integration \u00b6 For CI/CD deploy, use GitHub Actions with an action such as Deploy MkDocs . Or use Netlify. This is not covered in this tutorial.","title":"TL;DR"},{"location":"docs/tutorial/tldr/#tldr","text":"A simplified version of the tutorial.","title":"TL;DR"},{"location":"docs/tutorial/tldr/#local-setup","text":"Install pip install mkdocs Set up project mkdocs new . or Run mkdocs serve View on localhost:8000","title":"Local setup"},{"location":"docs/tutorial/tldr/#deploy-to-remote-site","text":"","title":"Deploy to remote site"},{"location":"docs/tutorial/tldr/#run-deploy-command-locally","text":"Deploy to GitHub Pages mkdocs gh-deploy View published site on GitHub Pages at https://USERNAME.github.io/REPO-NAME/","title":"Run deploy command locally"},{"location":"docs/tutorial/tldr/#run-continuous-integration","text":"For CI/CD deploy, use GitHub Actions with an action such as Deploy MkDocs . Or use Netlify. This is not covered in this tutorial.","title":"Run continuous integration"},{"location":"docs/tutorial/usage/","text":"Usage \u00b6 Build and preview a site locally Make sure to run all commands from the docs directory, as that is where Makefile is. $ cd docs CLI help \u00b6 $ make help default: install all: install build h help: install: upgrade: s serve: b build: d deploy: Serve docs \u00b6 This will build the docs in memory (not to disk) and serve an auto-reloading server. $ make serve Then open in your browser: localhost:8000 Build docs \u00b6 Build docs site to site directory. This is useful for a CI flow. $ make build","title":"Usage"},{"location":"docs/tutorial/usage/#usage","text":"Build and preview a site locally Make sure to run all commands from the docs directory, as that is where Makefile is. $ cd docs","title":"Usage"},{"location":"docs/tutorial/usage/#cli-help","text":"$ make help default: install all: install build h help: install: upgrade: s serve: b build: d deploy:","title":"CLI help"},{"location":"docs/tutorial/usage/#serve-docs","text":"This will build the docs in memory (not to disk) and serve an auto-reloading server. $ make serve Then open in your browser: localhost:8000","title":"Serve docs"},{"location":"docs/tutorial/usage/#build-docs","text":"Build docs site to site directory. This is useful for a CI flow. $ make build","title":"Build docs"}]}