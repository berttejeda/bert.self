# map $http_x_legacy_header $default_variable {
#   ~secondary "secondary.html";
#   default "primary.html";
# }

# map $http_x_new_header $actual_variable {
#   ~secondary "secondary.html";
#   default $default_variable;
# }

# server {
#     listen       80;
#     server_name  localhost;

#     #charset koi8-r;
#     #access_log  /var/log/nginx/host.access.log  main;
#     root /usr/share/nginx/html;

#     location / {
#         # try_files '' /$actual_variable =404;
#         proxy_pass http://127.0.0.1:6000;
#     }

#     #error_page  404              /404.html;

#     # redirect server error pages to the static page /50x.html
#     #
#     error_page   500 502 503 504  /50x.html;
#     location = /50x.html {
#         root   /usr/share/nginx/html;
#     }
# }

upstream development {
     server 10.10.2.207;
}

upstream staging {
     server 10.10.2.207;
}

upstream prod {
     server 10.10.2.207;
}

# map to different upstream backends based on header
map $http_x_server_select $pool {
     default "development";
     staging "staging";
     prod "prod";
}


# map $http_cookie $auth_token {
#   default "";
#   "~^auth_token" $auth_token;
# }

map $http_cookie $auth_token {
  default "";
  "~.*auth_token=(?<auth_token_match>[^;]+)" $auth_token_match;
}

map $http_cookie $target_port {
  default "";
  "~.*target_port=(?<target_port>[^;]+)" $target_port;
}

server {
     listen 9001;
     server_name gabbledegak.com;

     location / {  

          proxy_buffers         8 16k;
          proxy_buffer_size     16k;

          # if ($auth_token = "123456") {
          #     add_header Content-Type text/html;
          #     return 200 '<html><body>You are good!!!!</body></html>';                
          # }

          # if ($auth_token ~* "^auth_token") {
          #     set $auth_cookie $1;
          #     add_header Content-Type text/html;
          #     return 200 '<html><body>Detected the cookie!</body></html>';
          # }

          # if ($auth_token != '') {
          #     set $auth_cookie $1;
          #     add_header Content-Type text/html;
          #     return 200 '<html><body>Cookie matching "auth_token" found!<br />This is the value of auth_token: $auth_token</body></html>';
          # }

          # if ($auth_token = '') {
          #     set $auth_cookie $1;
          #     add_header Content-Type text/html;
          #     # return 200 '<html><body>Cookie matching "auth_token" is empty!<br />This is the value of http_cookie: $http_cookie</body></html>';
          #     return 403;
          # }          

          # if ($auth_cookie == '') {
          #     add_header Content-Type text/html;
          #     return 200 $auth_cookie; 
          # }          

          # if (!-f /Users/username/nginx/cookies/$auth_cookie) {
          #     rewrite ^ http://auth.nginx:8000 break;
          # }
          # add_header Set-Cookie "Path=/; HttpOnly; Secure";

          if ($target_port = '') {
              return 403;
          }

          auth_request /_oauth2_token_introspection;                              
          proxy_pass https://$pool:$target_port;

          #standard proxy settings
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Session-id $cookie_sid;


          proxy_set_header Host $http_host;
          proxy_redirect off;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-NginX-Proxy true;
          proxy_connect_timeout 600;
          proxy_send_timeout 600;
          proxy_read_timeout 600;
          send_timeout 600;
     }

    location = /_oauth2_token_introspection {
          internal;
          proxy_method      POST;
          proxy_set_header  Authorization "bearer SecretForOAuthServer";
          proxy_set_header  Content-Type "application/x-www-form-urlencoded";
          proxy_set_body    "token=$http_apikey&token_hint=access_token";
          # proxy_pass        https://idp.example.com/oauth/token;
          proxy_pass        http://10.10.2.207:10272;
      }

}

server {
     listen 9000;
     server_name gabbledegonk.com;
     location / {
        add_header Content-Type text/html;
        return 200 '<html><body>gabbledegonk!</body></html>';
     }
}